float [] pointX = new float [5000];
float [] pointY = new float [5000];
int [] pointStrokeFlag = new int [5000];
int [] pointMoveFlag = new int [5000];
int [] pointMoveFLAGX = new int [5000];
int [] pointMoveFLAGY = new int [5000];
float [] pointVX = new float [5000];
float [] pointVY = new float [5000];

float [] lineX1 = new float [500];
float [] lineY1 = new float [500];
float [] lineX2 = new float [500];
float [] lineY2 = new float [500];
float [] lineW = new float [500];
float [] lineH = new float [500];
int [] lineStrokeFlag = new int [500];
int [] lineMoveFlag = new int [500];
int [] lineMoveFLAGX = new int [500];
int [] lineMoveFLAGY = new int [500];
float [] lineVX = new float [500];
float [] lineVY = new float [500];

float [] rectX = new float [500];
float [] rectY = new float [500];
float [] rectW = new float [500];
float [] rectH = new float [500];
float [] rectX2 = new float [500];
float [] rectY2 = new float [500];
int [] rectFillFlag = new int [500];
int [] rectMoveFlag = new int [500];
int [] rectMoveFLAGX = new int [500];
int [] rectMoveFLAGY = new int [500];
float [] rectVX = new float [500];
float [] rectVY = new float [500];

int [] beginShapeFLAG = new int [500];
float [][] vertexX = new float [500][500];
float [][] vertexY = new float [500][500];
int [] vertexFillFlag = new int [500];
int [] vertexFlag = new int [500];
int [] lastVertexFlag = new int [500];
int vertexCount;
int [] vertexMoveFlag = new int [500];
float [] vertexMoveFLAGX = new float [500];
float [] vertexMoveFLAGY = new float [500];
float [] MaxX = new float [500];
float [] minX = new float [500];
float [] MaxY = new float [500];
float [] minY = new float [500];
float [][] DistX = new float [500][500];
float [][] distX = new float [500][500];
float [][] DistY = new float [500][500];
float [][] distY = new float [500][500];
float [] vertexVX = new float [500];
float [] vertexVY = new float [500];

int [] ellipFillFlag = new int [500];
int [] ellipMoveFlag = new int [500];
int [] ellipMoveFLAGX = new int [500];
int [] ellipMoveFLAGY = new int [500];
float [] ellipX = new float [500];
float [] ellipY = new float [500];
float [] ellipR1 = new float [500];
float [] ellipR2 = new float [500];
int [] ellipFlag = new int [500];
int [] ellipFLAG = new int [500];
float [] ellipVX = new float [500];
float [] ellipVY = new float [500];

void setup(){
  size(1000, 600);
  for(int p=0; p<5000; p++){
    pointVX[p]=random(1, 3);
    pointVY[p]=random(1, 3);
    pointMoveFLAGX[p]=(int)random(2);
    pointMoveFLAGY[p]=(int)random(2);
  }
  for(int l=0; l<500; l++){
    lineVX[l]=random(1, 3);
    lineVY[l]=random(1, 3);
    lineMoveFLAGX[l]=(int)random(2);
    lineMoveFLAGY[l]=(int)random(2);
  }
  for(int r=0; r<500; r++){
    rectVX[r]=random(1, 3);
    rectVY[r]=random(1, 3);
    rectMoveFLAGX[r]=(int)random(2);
    rectMoveFLAGY[r]=(int)random(2);
  }
  for(int v=0; v<500; v++){
    vertexVX[v]=random(1, 3);
    vertexVY[v]=random(1, 3);
    vertexMoveFLAGX[v]=(int)random(2);
    vertexMoveFLAGY[v]=(int)random(2);
  }
  for (int e=0; e<500; e++) {
    ellipVX[e]=random(1, 3);
    ellipVY[e]=random(1, 3);
    ellipMoveFLAGX[e]=(int)random(2);
    ellipMoveFLAGY[e]=(int)random(2);
  }
  pointX[0]=348.3333;
  pointY[0]=93.33333;
  pointX[1]=391.66666;
  pointY[1]=123.33333;
  pointX[2]=403.3333;
  pointY[2]=136.66666;
  pointX[3]=409.99997;
  pointY[3]=151.66666;
  pointX[4]=413.3333;
  pointY[4]=170.0;
  pointX[5]=413.3333;
  pointY[5]=194.99998;
  pointX[6]=393.3333;
  pointY[6]=236.66666;
  pointX[7]=375.0;
  pointY[7]=248.33333;
  pointX[8]=355.0;
  pointY[8]=253.33333;
  pointX[9]=345.0;
  pointY[9]=253.33333;
  pointX[10]=330.0;
  pointY[10]=253.33333;
  pointX[11]=320.0;
  pointY[11]=253.33333;
  pointX[12]=316.66666;
  pointY[12]=246.66666;
  pointX[13]=316.66666;
  pointY[13]=236.66666;
  pointX[14]=331.66666;
  pointY[14]=224.99998;
  pointX[15]=361.66666;
  pointY[15]=214.99998;
  pointX[16]=380.0;
  pointY[16]=211.66666;
  pointX[17]=454.99997;
  pointY[17]=211.66666;
  pointX[18]=481.66666;
  pointY[18]=223.33333;
  pointX[19]=503.3333;
  pointY[19]=236.66666;
  pointX[20]=515.0;
  pointY[20]=253.33333;
  pointX[21]=520.0;
  pointY[21]=268.3333;
  pointX[22]=520.0;
  pointY[22]=273.3333;
  pointX[23]=516.6666;
  pointY[23]=285.0;
  pointX[24]=503.3333;
  pointY[24]=291.66666;
  pointX[25]=493.3333;
  pointY[25]=293.3333;
  pointX[26]=476.66666;
  pointY[26]=293.3333;
  pointX[27]=469.99997;
  pointY[27]=290.0;
  pointX[28]=463.3333;
  pointY[28]=280.0;
  pointX[29]=463.3333;
  pointY[29]=278.3333;
  pointX[30]=478.3333;
  pointY[30]=273.3333;
  pointX[31]=520.0;
  pointY[31]=270.0;
  pointX[32]=580.0;
  pointY[32]=271.66666;
  pointX[33]=640.0;
  pointY[33]=283.3333;
  pointX[34]=685.0;
  pointY[34]=306.66666;
  pointX[35]=718.3333;
  pointY[35]=328.3333;
  pointX[36]=733.3333;
  pointY[36]=348.3333;
  pointX[37]=736.6666;
  pointY[37]=360.0;
  pointX[38]=731.6666;
  pointY[38]=370.0;
  pointX[39]=713.3333;
  pointY[39]=378.3333;
  pointX[40]=686.6666;
  pointY[40]=380.0;
  pointX[41]=656.6666;
  pointY[41]=375.0;
  pointX[42]=656.6666;
  pointY[42]=375.0;
  pointX[43]=618.3333;
  pointY[43]=355.0;
  pointX[44]=610.0;
  pointY[44]=346.66666;
  pointX[45]=610.0;
  pointY[45]=335.0;
  pointX[46]=616.6666;
  pointY[46]=323.3333;
  pointX[47]=633.3333;
  pointY[47]=316.66666;
  pointX[48]=650.0;
  pointY[48]=315.0;
  pointX[49]=705.0;
  pointY[49]=318.3333;
  pointX[50]=726.6666;
  pointY[50]=326.66666;
  pointX[51]=738.3333;
  pointY[51]=338.3333;
  pointX[52]=746.6666;
  pointY[52]=358.3333;
  pointX[53]=751.6666;
  pointY[53]=378.3333;
  pointX[54]=755.0;
  pointY[54]=398.3333;
  pointX[55]=755.0;
  pointY[55]=406.66666;
  pointX[56]=755.0;
  pointY[56]=406.66666;
  pointX[57]=748.3333;
  pointY[57]=426.66666;
  pointX[58]=735.0;
  pointY[58]=429.99997;
  pointX[59]=723.3333;
  pointY[59]=431.66666;
  pointX[60]=661.6666;
  pointY[60]=426.66666;
  pointX[61]=626.6666;
  pointY[61]=418.3333;
  pointX[62]=606.6666;
  pointY[62]=404.99997;
  pointX[63]=596.6666;
  pointY[63]=396.66666;
  pointX[64]=595.0;
  pointY[64]=389.99997;
  pointX[65]=600.0;
  pointY[65]=383.3333;
  pointX[66]=616.6666;
  pointY[66]=380.0;
  pointX[67]=656.6666;
  pointY[67]=381.66666;
  pointX[68]=705.0;
  pointY[68]=391.66666;
  pointX[69]=726.6666;
  pointY[69]=399.99997;
  pointX[70]=760.0;
  pointY[70]=421.66666;
  pointX[71]=814.99994;
  pointY[71]=478.3333;
  pointX[72]=834.99994;
  pointY[72]=506.66666;
  pointX[73]=844.99994;
  pointY[73]=523.3333;
  pointX[74]=849.99994;
  pointY[74]=533.3333;
  pointX[75]=839.99994;
  pointY[75]=540.0;
  pointX[76]=821.6666;
  pointY[76]=541.6666;
  pointX[77]=796.6666;
  pointY[77]=543.3333;
  pointX[78]=783.3333;
  pointY[78]=543.3333;
  pointX[79]=751.6666;
  pointY[79]=543.3333;
  pointX[80]=718.3333;
  pointY[80]=536.6666;
  pointX[81]=691.6666;
  pointY[81]=528.3333;
  pointX[82]=670.0;
  pointY[82]=518.3333;
  moveFlag[0]=1;
  moveFlag[1]=1;
  moveFlag[2]=1;
  moveFlag[3]=1;
  moveFlag[4]=1;
  moveFlag[5]=1;
  moveFlag[6]=1;
  moveFlag[7]=1;
  moveFlag[8]=1;
  moveFlag[9]=1;
  moveFlag[10]=1;
  moveFlag[11]=1;
  moveFlag[12]=1;
  moveFlag[13]=1;
  moveFlag[14]=1;
  moveFlag[15]=1;
  moveFlag[16]=1;
  moveFlag[17]=1;
  moveFlag[18]=1;
  moveFlag[19]=1;
  moveFlag[20]=1;
  moveFlag[21]=1;
  moveFlag[22]=1;
  moveFlag[23]=1;
  moveFlag[24]=1;
  moveFlag[25]=1;
  moveFlag[26]=1;
  moveFlag[27]=1;
  moveFlag[28]=1;
  moveFlag[29]=1;
  moveFlag[30]=1;
  moveFlag[31]=1;
  moveFlag[32]=1;
  moveFlag[33]=1;
  moveFlag[34]=1;
  moveFlag[35]=1;
  moveFlag[36]=1;
  moveFlag[37]=1;
  moveFlag[38]=1;
  moveFlag[39]=1;
  moveFlag[40]=1;
  moveFlag[41]=1;
  moveFlag[42]=1;
  moveFlag[43]=1;
  moveFlag[44]=1;
  moveFlag[45]=1;
  moveFlag[46]=1;
  moveFlag[47]=1;
  moveFlag[48]=1;
  moveFlag[49]=1;
  moveFlag[50]=1;
  moveFlag[51]=1;
  moveFlag[52]=1;
  moveFlag[53]=1;
  moveFlag[54]=1;
  moveFlag[55]=1;
  moveFlag[56]=1;
  moveFlag[57]=1;
  moveFlag[58]=1;
  moveFlag[59]=1;
  moveFlag[60]=1;
  moveFlag[61]=1;
  moveFlag[62]=1;
  moveFlag[63]=1;
  moveFlag[64]=1;
  moveFlag[65]=1;
  moveFlag[66]=1;
  moveFlag[67]=1;
  moveFlag[68]=1;
  moveFlag[69]