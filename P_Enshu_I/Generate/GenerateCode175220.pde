float [] pointX = new float [5000];
float [] pointY = new float [5000];
int [] pointStrokeFlag = new int [5000];
int [] pointMoveFlag = new int [5000];
int [] pointMoveFLAGX = new int [5000];
int [] pointMoveFLAGY = new int [5000];
float [] pointVX = new float [5000];
float [] pointVY = new float [5000];

float [] lineX1 = new float [500];
float [] lineY1 = new float [500];
float [] lineX2 = new float [500];
float [] lineY2 = new float [500];
float [] lineW = new float [500];
float [] lineH = new float [500];
int [] lineStrokeFlag = new int [500];
int [] lineMoveFlag = new int [500];
int [] lineMoveFLAGX = new int [500];
int [] lineMoveFLAGY = new int [500];
float [] lineVX = new float [500];
float [] lineVY = new float [500];

float [] rectX = new float [500];
float [] rectY = new float [500];
float [] rectW = new float [500];
float [] rectH = new float [500];
float [] rectX2 = new float [500];
float [] rectY2 = new float [500];
int [] rectFillFlag = new int [500];
int [] rectMoveFlag = new int [500];
int [] rectMoveFLAGX = new int [500];
int [] rectMoveFLAGY = new int [500];
float [] rectVX = new float [500];
float [] rectVY = new float [500];

int [] beginShapeFLAG = new int [500];
float [][] vertexX = new float [500][500];
float [][] vertexY = new float [500][500];
int [] vertexFillFlag = new int [500];
int [] vertexFlag = new int [500];
int [] lastVertexFlag = new int [500];
int vertexCount;
int [] vertexMoveFlag = new int [500];
float [] vertexMoveFLAGX = new float [500];
float [] vertexMoveFLAGY = new float [500];
float [] MaxX = new float [500];
float [] minX = new float [500];
float [] MaxY = new float [500];
float [] minY = new float [500];
float [][] DistX = new float [500][500];
float [][] distX = new float [500][500];
float [][] DistY = new float [500][500];
float [][] distY = new float [500][500];
float [] vertexVX = new float [500];
float [] vertexVY = new float [500];

int [] ellipFillFlag = new int [500];
int [] ellipMoveFlag = new int [500];
int [] ellipMoveFLAGX = new int [500];
int [] ellipMoveFLAGY = new int [500];
float [] ellipX = new float [500];
float [] ellipY = new float [500];
float [] ellipR1 = new float [500];
float [] ellipR2 = new float [500];
int [] ellipFlag = new int [500];
int [] ellipFLAG = new int [500];
float [] ellipVX = new float [500];
float [] ellipVY = new float [500];

void setup(){
  size(1000, 600);
  for(int p=0; p<5000; p++){
    pointVX[p]=random(1, 3);
    pointVY[p]=random(1, 3);
    pointMoveFLAGX[p]=(int)random(2);
    pointMoveFLAGY[p]=(int)random(2);
  }
  for(int l=0; l<500; l++){
    lineVX[l]=random(1, 3);
    lineVY[l]=random(1, 3);
    lineMoveFLAGX[l]=(int)random(2);
    lineMoveFLAGY[l]=(int)random(2);
  }
  for(int r=0; r<500; r++){
    rectVX[r]=random(1, 3);
    rectVY[r]=random(1, 3);
    rectMoveFLAGX[r]=(int)random(2);
    rectMoveFLAGY[r]=(int)random(2);
  }
  for(int v=0; v<500; v++){
    vertexVX[v]=random(1, 3);
    vertexVY[v]=random(1, 3);
    vertexMoveFLAGX[v]=(int)random(2);
    vertexMoveFLAGY[v]=(int)random(2);
  }
  for (int e=0; e<500; e++) {
    ellipVX[e]=random(1, 3);
    ellipVY[e]=random(1, 3);
    ellipMoveFLAGX[e]=(int)random(2);
    ellipMoveFLAGY[e]=(int)random(2);
  }
  pointX[0]=305.0;
  pointY[0]=78.33333;
  pointX[1]=305.0;
  pointY[1]=78.33333;
  pointX[2]=305.0;
  pointY[2]=78.33333;
  pointX[3]=305.0;
  pointY[3]=78.33333;
  pointX[4]=305.0;
  pointY[4]=78.33333;
  pointX[5]=363.3333;
  pointY[5]=180.0;
  pointX[6]=363.3333;
  pointY[6]=208.33333;
  pointX[7]=363.3333;
  pointY[7]=208.33333;
  pointX[8]=353.3333;
  pointY[8]=251.66666;
  pointX[9]=343.3333;
  pointY[9]=266.66666;
  pointX[10]=336.66666;
  pointY[10]=278.3333;
  pointX[11]=326.66666;
  pointY[11]=281.66666;
  pointX[12]=323.3333;
  pointY[12]=281.66666;
  pointX[13]=313.3333;
  pointY[13]=278.3333;
  pointX[14]=301.66666;
  pointY[14]=263.3333;
  pointX[15]=286.66666;
  pointY[15]=238.33333;
  pointX[16]=271.66666;
  pointY[16]=198.33333;
  pointX[17]=260.0;
  pointY[17]=141.66666;
  pointX[18]=256.66666;
  pointY[18]=103.33333;
  pointX[19]=260.0;
  pointY[19]=75.0;
  pointX[20]=268.3333;
  pointY[20]=61.666664;
  pointX[21]=268.3333;
  pointY[21]=61.666664;
  pointX[22]=310.0;
  pointY[22]=56.666664;
  pointX[23]=320.0;
  pointY[23]=56.666664;
  pointX[24]=320.0;
  pointY[24]=56.666664;
  pointX[25]=366.66666;
  pointY[25]=66.666664;
  pointX[26]=380.0;
  pointY[26]=78.33333;
  pointX[27]=386.66666;
  pointY[27]=90.0;
  pointX[28]=384.99997;
  pointY[28]=114.99999;
  pointX[29]=384.99997;
  pointY[29]=114.99999;
  pointX[30]=373.3333;
  pointY[30]=140.0;
  pointX[31]=360.0;
  pointY[31]=153.33333;
  pointX[32]=350.0;
  pointY[32]=160.0;
  pointX[33]=338.3333;
  pointY[33]=163.33333;
  pointX[34]=328.3333;
  pointY[34]=163.33333;
  pointX[35]=213.33333;
  pointY[35]=81.666664;
  pointX[36]=213.33333;
  pointY[36]=81.666664;
  pointX[37]=243.33333;
  pointY[37]=138.33333;
  pointX[38]=249.99998;
  pointY[38]=155.0;
  pointX[39]=254.99998;
  pointY[39]=175.0;
  pointX[40]=256.66666;
  pointY[40]=188.33333;
  pointX[41]=258.3333;
  pointY[41]=218.33333;
  pointX[42]=258.3333;
  pointY[42]=243.33333;
  pointX[43]=258.3333;
  pointY[43]=263.3333;
  pointX[44]=258.3333;
  pointY[44]=280.0;
  pointX[45]=253.33333;
  pointY[45]=300.0;
  pointX[46]=249.99998;
  pointY[46]=306.66666;
  pointX[47]=249.99998;
  pointY[47]=310.0;
  pointX[48]=248.33333;
  pointY[48]=311.66666;
  pointX[49]=246.66666;
  pointY[49]=313.3333;
  pointX[50]=246.66666;
  pointY[50]=316.66666;
  pointX[51]=246.66666;
  pointY[51]=316.66666;
  pointX[52]=243.33333;
  pointY[52]=318.3333;
  pointX[53]=241.66666;
  pointY[53]=320.0;
  pointX[54]=239.99998;
  pointY[54]=323.3333;
  pointX[55]=238.33333;
  pointY[55]=326.66666;
  pointX[56]=238.33333;
  pointY[56]=326.66666;
  pointX[57]=238.33333;
  pointY[57]=326.66666;
  pointX[58]=238.33333;
  pointY[58]=326.66666;
  pointX[59]=238.33333;
  pointY[59]=326.66666;
  pointX[60]=226.66666;
  pointY[60]=340.0;
  pointX[61]=224.99998;
  pointY[61]=343.3333;
  pointX[62]=221.66666;
  pointY[62]=346.66666;
  pointX[63]=219.99998;
  pointY[63]=350.0;
  pointX[64]=219.99998;
  pointY[64]=350.0;
  pointX[65]=219.99998;
  pointY[65]=350.0;
  pointX[66]=209.99998;
  pointY[66]=358.3333;
  pointX[67]=209.99998;
  pointY[67]=358.3333;
  pointX[68]=206.66666;
  pointY[68]=358.3333;
  pointX[69]=204.99998;
  pointY[69]=358.3333;
  pointX[70]=203.33333;
  pointY[70]=358.3333;
  pointX[71]=198.33333;
  pointY[71]=348.3333;
  pointX[72]=196.66666;
  pointY[72]=340.0;
  pointX[73]=193.33333;
  pointY[73]=330.0;
  pointX[74]=191.66666;
  pointY[74]=316.66666;
  pointX[75]=191.66666;
  pointY[75]=316.66666;
  pointX[76]=190.0;
  pointY[76]=286.66666;
  pointX[77]=190.0;
  pointY[77]=273.3333;
  pointX[78]=190.0;
  pointY[78]=273.3333;
  pointX[79]=196.66666;
  pointY[79]=241.66666;
  pointX[80]=209.99998;
  pointY[80]=223.33333;
  pointX[81]=211.66666;
  pointY[81]=221.66666;
  strokeFlag[0]=1;
  strokeFlag[1]=1;
  strokeFlag[2]=1;
  strokeFlag[3]=1;
  strokeFlag[4]=1;
  strokeFlag[5]=1;
  strokeFlag[6]=1;
  strokeFlag[7]=1;
  strokeFlag[8]=1;
  strokeFlag[9]=1;
  strokeFlag[10]=1;
  strokeFlag[11]=1;
  strokeFlag[12]=1;
  strokeFlag[13]=1;
  strokeFlag[14]=1;
  strokeFlag[15]=1;
  strokeFlag[16]=1;
  strokeFlag[17]=1;
  strokeFlag[18]=1;
  strokeFlag[19]=1;
  strokeFlag[20]=1;
  strokeFlag[21]=1;
  strokeFlag[22]=1;
  strokeFlag[23]=1;
  strokeFlag[24]=1;
  strokeFlag[25]=1;
  strokeFlag[26]=1;
  strokeFlag[27]=1;
  strokeFlag[28]=1;
  strokeFlag[29]=1;
  strokeFlag[30]=1;
  strokeFlag[31]=1;
  strokeFlag[32]=1;
  strokeFlag[33]=1;
  strokeFlag[34]=1;
  strokeFlag[35]=1;
  strokeFlag[36]=1;
  strokeFlag[37]=1;
  strokeFlag[38]=1;
  strokeFlag[39]=1;
  strokeFlag[40]=1;
  strokeFlag[41]=1;
  strokeFlag[42]=1;
  strokeFlag[43]=1;
  strokeFlag[44]=1;
  strokeFlag[45]=1;
  strokeFlag[46]=1;
  strokeFlag[47]=1;
  strokeFlag[48]=1;
  strokeFlag[49]=1;
  strokeFlag[50]=1;
  strokeFlag[51]=1;
  strokeFlag[52]=1;
  strokeFlag[53]=1;
  strokeFlag[54]=1;
  strokeFlag[55]=1;
  strokeFlag[56]=1;
  strokeFlag[57]=1;
  strokeFlag[58]=1;
  strokeFlag[59]=1;
  strokeFlag[60]=1;
  strokeFlag[61]=1;
 